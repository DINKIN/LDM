/* DO NOT EDIT THIS FILE. It was created by extractDecls */
/*
 *   See file ../COPYRIGHT for copying and redistribution conditions.
 *
 *   This header-file specifies the API for the ldmfork() function.
 */
#ifndef LDMFORK_H
#define LDMFORK_H

#include <sys/types.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Opens a file descriptor on `/dev/null` if it's closed. If the file
 * descriptor is open, then nothing happens.
 *
 * @param[in] fileno  File descriptor
 * @param[in] flags   `open()` flags
 * @retval  0         Success
 * @retval -1         Failure. log_add() called.
 */
int open_on_dev_null_if_closed(
        const int fileno,
        const int flags);

/**
 * Ensures that a file descriptor will close if and when a function of the
 * `exec()` family is called.
 *
 * @param[in] fd  File descriptor
 * @retval  0     Success
 * @retval -1     Failure. log_add() called.
 */
int ensure_close_on_exec(
        const int fd);

/**
 * Forks the current process in the context of the LDM.  Does whatever's
 * necessary before and after the fork to ensure correct behavior.  Terminates
 * the child process if the fork() was successful but an error occurs.
 *
 * @retval -1  Failure. "log_add()" called.
 * @retval  0  Success. The calling process is the child.
 * @return              PID of child process. The calling process is the parent.
 */
pid_t ldmfork(void);

#ifdef __cplusplus
}
#endif

#endif
